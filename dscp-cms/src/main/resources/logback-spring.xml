<configuration>
    <!-- 定义日志项目名归属,用于区分不同应用的日志 -->
    <contextName>loginApplication</contextName>

    <!-- 自定义属性 -->
    <property name="logSavePath" value="/data/java/logs"/>

    <!-- 定义打印日志的组件 -->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!-- 打印格式 -->
        <encoder>
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 打印除了TRACE外的所有日志 -->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志的路径和名称 -->
        <file>${logSavePath}/cms.log</file>
        <!-- 只打印INFO级别的日志 -->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>INFO</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <!--ThresholdFilter info以上级别-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!-- 打印格式 -->
        <encoder>
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </Pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 按时间保存日志 修改格式可以按小时、按天、月来保存 -->
            <fileNamePattern>${logSavePath}/provider_%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保存时长 30天 -->
            <!--
            通过rollingPolicy设置日志滚动的策略，这是使用按照时间滚动
            fileNamePattern属性设置滚动生成文件的格式,这里设置的精确到天，也就是按照天滚动，如果时间设置精确到秒，就按秒来滚动
            maxHistory属性设定最大的文件数，比如按天滚动，这里设置了30天，在第31天日志生成的时候，第一天的日志就会被删掉
            -->
            <MaxHistory>30</MaxHistory>
            <!-- 文件大小 -->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志的路径和名称 -->
        <file>${logSavePath}/cms_error.log</file>
        <!-- 打印WARN，ERROR的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <!-- 打印格式 -->
        <encoder>
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </Pattern>

            <charset>UTF-8</charset>
        </encoder>
        <!-- 滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 按时间保存日志 修改格式可以按小时、按天、月来保存 -->
            <fileNamePattern>${logSavePath}/provider_error_%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--
            通过rollingPolicy设置日志滚动的策略，这是使用按照时间滚动
            fileNamePattern属性设置滚动生成文件的格式,这里设置的精确到天，也就是按照天滚动，如果时间设置精确到秒，就按秒来滚动
            maxHistory属性设定最大的文件数，比如按天滚动，这里设置了30天，在第31天日志生成的时候，第一天的日志就会被删掉
            -->
            <MaxHistory>30</MaxHistory>
            <!-- 文件大小 -->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 定义某一个包或者具体的某一个类的日志打印级别以及指定appender -->
    <!--<logger name="login.mapper" level="DEBUG"/>-->

    <!-- 最终的策略 -->
    <!-- 开发环境:打印控制台-->
    <springProfile name="dev">
        <root>
        <appender-ref ref="consoleLog"/>
        </root>
    </springProfile>
    <!-- 测试环境 -->
    <springProfile name="test">
        <root>
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="fileInfoLog"/>
        <appender-ref ref="fileErrorLog"/>
        </root>
    </springProfile>
    <!-- 生产环境 -->
    <springProfile name="pro">
        <root>
            <appender-ref ref="consoleLog"/>
            <appender-ref ref="fileInfoLog"/>
            <appender-ref ref="fileErrorLog"/>
        </root>
    </springProfile>

</configuration>